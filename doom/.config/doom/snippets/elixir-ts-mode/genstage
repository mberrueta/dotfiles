# -*- mode: snippet -*-
# name: genstage
# key: genstage
# --
defmodule PageProducer do
  use GenStage

  def start_link(_args) do
    initial_state = []
    GenStage.start_link(__MODULE__, initial_state, name: __MODULE__)
  end

  def init(initial_state) do
    {:producer, initial_state}
  end

  def handle_demand(demand, state) do
    events = []
    {:noreply, events, state}
  end
end

defmodule PageConsumer do
  use GenStage

  def start_link(_args) do
    initial_state = []
    GenStage.start_link(__MODULE__, initial_state)
  end

  def init(initial_state) do
    # min max can be set in subscribe_to:
    # sub_opts = [{PageProducer, min_demand: 500, max_demand: 1000}]
    {:consumer, initial_state, subscribe_to: [PageProducer]}
  end

  def handle_events(events, _from, state) do
    # Pretending that we're scraping web pages.
    Enum.each(events, fn _page -> Scraper.work() end)
    {:noreply, [], state}
  end
end

{:ok, _producer} = PageProducer.start_link(0)
